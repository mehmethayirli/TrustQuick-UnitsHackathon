/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TrustNet {
  export type UserProfileStruct = {
    name: string;
    ipfsHash: string;
    overallScore: BigNumberish;
    financialScore: BigNumberish;
    professionalScore: BigNumberish;
    socialScore: BigNumberish;
    isActive: boolean;
    lastUpdated: BigNumberish;
  };

  export type UserProfileStructOutput = [
    name: string,
    ipfsHash: string,
    overallScore: bigint,
    financialScore: bigint,
    professionalScore: bigint,
    socialScore: bigint,
    isActive: boolean,
    lastUpdated: bigint
  ] & {
    name: string;
    ipfsHash: string;
    overallScore: bigint;
    financialScore: bigint;
    professionalScore: bigint;
    socialScore: bigint;
    isActive: boolean;
    lastUpdated: bigint;
  };

  export type ReferenceStruct = {
    name: string;
    relationshipType: string;
    isVerified: boolean;
    timestamp: BigNumberish;
    ipfsHash: string;
  };

  export type ReferenceStructOutput = [
    name: string,
    relationshipType: string,
    isVerified: boolean,
    timestamp: bigint,
    ipfsHash: string
  ] & {
    name: string;
    relationshipType: string;
    isVerified: boolean;
    timestamp: bigint;
    ipfsHash: string;
  };
}

export interface TrustNetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_REFERENCES"
      | "MAX_SCORE"
      | "MIN_SCORE"
      | "addReference"
      | "authorizeAI"
      | "authorizeVerifier"
      | "authorizedAI"
      | "authorizedVerifiers"
      | "getProfile"
      | "getReferences"
      | "owner"
      | "pause"
      | "paused"
      | "profiles"
      | "renounceOwnership"
      | "revokeAI"
      | "revokeVerifier"
      | "transferOwnership"
      | "unpause"
      | "updateProfile"
      | "updateScores"
      | "verifyReference"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AIAuthorized"
      | "AIRevoked"
      | "OwnershipTransferred"
      | "Paused"
      | "ProfileUpdated"
      | "ReferenceAdded"
      | "ReferenceVerified"
      | "ScoreUpdated"
      | "Unpaused"
      | "VerifierAuthorized"
      | "VerifierRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_REFERENCES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_SCORE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_SCORE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addReference",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeAI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedVerifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferences",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScores",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReference",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_REFERENCES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SCORE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_SCORE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReferences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReference",
    data: BytesLike
  ): Result;
}

export namespace AIAuthorizedEvent {
  export type InputTuple = [ai: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [ai: string, timestamp: bigint];
  export interface OutputObject {
    ai: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AIRevokedEvent {
  export type InputTuple = [ai: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [ai: string, timestamp: bigint];
  export interface OutputObject {
    ai: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    name: string,
    ipfsHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    name: string,
    ipfsHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    name: string;
    ipfsHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferenceAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    name: string,
    relationshipType: string,
    ipfsHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    name: string,
    relationshipType: string,
    ipfsHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    name: string;
    relationshipType: string;
    ipfsHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferenceVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    referenceIndex: BigNumberish,
    verifier: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    referenceIndex: bigint,
    verifier: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    referenceIndex: bigint;
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    overallScore: BigNumberish,
    financialScore: BigNumberish,
    professionalScore: BigNumberish,
    socialScore: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    overallScore: bigint,
    financialScore: bigint,
    professionalScore: bigint,
    socialScore: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    overallScore: bigint;
    financialScore: bigint;
    professionalScore: bigint;
    socialScore: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAuthorizedEvent {
  export type InputTuple = [verifier: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [verifier: string, timestamp: bigint];
  export interface OutputObject {
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRevokedEvent {
  export type InputTuple = [verifier: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [verifier: string, timestamp: bigint];
  export interface OutputObject {
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustNet extends BaseContract {
  connect(runner?: ContractRunner | null): TrustNet;
  waitForDeployment(): Promise<this>;

  interface: TrustNetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_REFERENCES: TypedContractMethod<[], [bigint], "view">;

  MAX_SCORE: TypedContractMethod<[], [bigint], "view">;

  MIN_SCORE: TypedContractMethod<[], [bigint], "view">;

  addReference: TypedContractMethod<
    [_name: string, _relationshipType: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  authorizeAI: TypedContractMethod<[_ai: AddressLike], [void], "nonpayable">;

  authorizeVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedAI: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  authorizedVerifiers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getProfile: TypedContractMethod<
    [_user: AddressLike],
    [TrustNet.UserProfileStructOutput],
    "view"
  >;

  getReferences: TypedContractMethod<
    [_user: AddressLike],
    [TrustNet.ReferenceStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  profiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        name: string;
        ipfsHash: string;
        overallScore: bigint;
        financialScore: bigint;
        professionalScore: bigint;
        socialScore: bigint;
        isActive: boolean;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAI: TypedContractMethod<[_ai: AddressLike], [void], "nonpayable">;

  revokeVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateProfile: TypedContractMethod<
    [_name: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  updateScores: TypedContractMethod<
    [
      _user: AddressLike,
      _overall: BigNumberish,
      _financial: BigNumberish,
      _professional: BigNumberish,
      _social: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  verifyReference: TypedContractMethod<
    [_user: AddressLike, _referenceIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_REFERENCES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addReference"
  ): TypedContractMethod<
    [_name: string, _relationshipType: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeAI"
  ): TypedContractMethod<[_ai: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizeVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAI"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedVerifiers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [_user: AddressLike],
    [TrustNet.UserProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferences"
  ): TypedContractMethod<
    [_user: AddressLike],
    [TrustNet.ReferenceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "profiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        name: string;
        ipfsHash: string;
        overallScore: bigint;
        financialScore: bigint;
        professionalScore: bigint;
        socialScore: bigint;
        isActive: boolean;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAI"
  ): TypedContractMethod<[_ai: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<
    [_name: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateScores"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _overall: BigNumberish,
      _financial: BigNumberish,
      _professional: BigNumberish,
      _social: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyReference"
  ): TypedContractMethod<
    [_user: AddressLike, _referenceIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AIAuthorized"
  ): TypedContractEvent<
    AIAuthorizedEvent.InputTuple,
    AIAuthorizedEvent.OutputTuple,
    AIAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "AIRevoked"
  ): TypedContractEvent<
    AIRevokedEvent.InputTuple,
    AIRevokedEvent.OutputTuple,
    AIRevokedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferenceAdded"
  ): TypedContractEvent<
    ReferenceAddedEvent.InputTuple,
    ReferenceAddedEvent.OutputTuple,
    ReferenceAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReferenceVerified"
  ): TypedContractEvent<
    ReferenceVerifiedEvent.InputTuple,
    ReferenceVerifiedEvent.OutputTuple,
    ReferenceVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreUpdated"
  ): TypedContractEvent<
    ScoreUpdatedEvent.InputTuple,
    ScoreUpdatedEvent.OutputTuple,
    ScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAuthorized"
  ): TypedContractEvent<
    VerifierAuthorizedEvent.InputTuple,
    VerifierAuthorizedEvent.OutputTuple,
    VerifierAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRevoked"
  ): TypedContractEvent<
    VerifierRevokedEvent.InputTuple,
    VerifierRevokedEvent.OutputTuple,
    VerifierRevokedEvent.OutputObject
  >;

  filters: {
    "AIAuthorized(address,uint256)": TypedContractEvent<
      AIAuthorizedEvent.InputTuple,
      AIAuthorizedEvent.OutputTuple,
      AIAuthorizedEvent.OutputObject
    >;
    AIAuthorized: TypedContractEvent<
      AIAuthorizedEvent.InputTuple,
      AIAuthorizedEvent.OutputTuple,
      AIAuthorizedEvent.OutputObject
    >;

    "AIRevoked(address,uint256)": TypedContractEvent<
      AIRevokedEvent.InputTuple,
      AIRevokedEvent.OutputTuple,
      AIRevokedEvent.OutputObject
    >;
    AIRevoked: TypedContractEvent<
      AIRevokedEvent.InputTuple,
      AIRevokedEvent.OutputTuple,
      AIRevokedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProfileUpdated(address,string,string,uint256)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "ReferenceAdded(address,string,string,string,uint256)": TypedContractEvent<
      ReferenceAddedEvent.InputTuple,
      ReferenceAddedEvent.OutputTuple,
      ReferenceAddedEvent.OutputObject
    >;
    ReferenceAdded: TypedContractEvent<
      ReferenceAddedEvent.InputTuple,
      ReferenceAddedEvent.OutputTuple,
      ReferenceAddedEvent.OutputObject
    >;

    "ReferenceVerified(address,uint256,address,uint256)": TypedContractEvent<
      ReferenceVerifiedEvent.InputTuple,
      ReferenceVerifiedEvent.OutputTuple,
      ReferenceVerifiedEvent.OutputObject
    >;
    ReferenceVerified: TypedContractEvent<
      ReferenceVerifiedEvent.InputTuple,
      ReferenceVerifiedEvent.OutputTuple,
      ReferenceVerifiedEvent.OutputObject
    >;

    "ScoreUpdated(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
    ScoreUpdated: TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerifierAuthorized(address,uint256)": TypedContractEvent<
      VerifierAuthorizedEvent.InputTuple,
      VerifierAuthorizedEvent.OutputTuple,
      VerifierAuthorizedEvent.OutputObject
    >;
    VerifierAuthorized: TypedContractEvent<
      VerifierAuthorizedEvent.InputTuple,
      VerifierAuthorizedEvent.OutputTuple,
      VerifierAuthorizedEvent.OutputObject
    >;

    "VerifierRevoked(address,uint256)": TypedContractEvent<
      VerifierRevokedEvent.InputTuple,
      VerifierRevokedEvent.OutputTuple,
      VerifierRevokedEvent.OutputObject
    >;
    VerifierRevoked: TypedContractEvent<
      VerifierRevokedEvent.InputTuple,
      VerifierRevokedEvent.OutputTuple,
      VerifierRevokedEvent.OutputObject
    >;
  };
}
